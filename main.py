import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
import aiohttp
from bs4 import BeautifulSoup

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7593641535:AAELSxTmLO5pxfzNLKi1vAeS-XKsLKSmlek"
CHANNEL_ID = "@leanysterj"
RUTRACKER_LOGIN = "leanyster"
RUTRACKER_PASSWORD = "Balakakotik29"
WEBHOOK_HOST = "https://hueta.onrender.com"
WEBHOOK_PATH = "/webhook"
DOWNLOAD_DIR = "./downloads"
MAX_FILE_SIZE = 2 * 1024 * 1024 * 1024  # 2GB

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
os.makedirs(DOWNLOAD_DIR, exist_ok=True)

async def rutracker_login(session):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ Rutracker"""
    login_url = "https://rutracker.org/forum/login.php"
    data = {
        "login_username": RUTRACKER_LOGIN,
        "login_password": RUTRACKER_PASSWORD,
        "login": "–í—Ö–æ–¥"
    }
    try:
        async with session.post(login_url, data=data) as response:
            if response.status != 200:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status}")
                return False
            return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False

async def search_rutracker(query):
    """–ü–æ–∏—Å–∫ –Ω–∞ Rutracker"""
    search_url = f"https://rutracker.org/forum/tracker.php?nm={query}"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    }
    
    async with aiohttp.ClientSession(headers=headers) as session:
        if not await rutracker_login(session):
            return []
        
        try:
            async with session.get(search_url) as response:
                if response.status != 200:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {response.status}")
                    return []
                
                html = await response.text()
                soup = BeautifulSoup(html, 'html.parser')
                results = []
                
                for row in soup.select('tr.tCenter.hl-tr'):
                    title_elem = row.select_one('td.t-title a.tLink')
                    magnet_elem = row.select_one('a.magnet-link')
                    
                    if title_elem and magnet_elem:
                        title = title_elem.text.strip()
                        magnet = magnet_elem['href']
                        results.append({"title": title, "magnet": magnet})
                
                return results[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
            return []

async def create_search_keyboard(results):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
    for item in results:
        keyboard.inline_keyboard.append([
            types.InlineKeyboardButton(text=item["title"], callback_data=item["magnet"])
        ])
    return keyboard

async def download_file(magnet, filename):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ aria2c"""
    filepath = os.path.join(DOWNLOAD_DIR, filename)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists(filepath):
        os.remove(filepath)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
    proc = await asyncio.create_subprocess_exec(
        "aria2c", "--seed-time=0", "--max-overall-download-limit=10M",
        magnet, "--dir=" + DOWNLOAD_DIR, "--out=" + filename,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE
    )
    
    await proc.communicate()
    return filepath if os.path.exists(filepath) else None

@dp.message(Command("start"))
async def cmd_start(message: types.
Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "üé¨ <b>–ö–∏–Ω–æ–±–æ—Ç</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞, –∏ —è –Ω–∞–π–¥—É –µ–≥–æ –Ω–∞ Rutracker!\n\n"
        "üìå <i>–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –¥–æ 2GB</i>"
    )

@dp.message()
async def handle_search(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = message.text.strip()
    if not query:
        await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        return
    
    msg = await message.answer("üîé –ò—â—É –Ω–∞ Rutracker...")
    
    try:
        results = await search_rutracker(query)
        if not results:
            await msg.edit_text("üòï –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")
            return
        
        keyboard = await create_search_keyboard(results)
        await msg.edit_text(
            f"üé• –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É <b>'{query}'</b>:",
            reply_markup=keyboard
        )
    
    except Exception as e:
        logger.error(f"Search error: {e}")
        await msg.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query()
async def handle_download(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    magnet = callback.data
    filename = f"movie_{callback.message.message_id}.mp4"
    
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
        msg = await callback.message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
        
        filepath = await download_file(magnet, filename)
        if not filepath:
            await msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª.")
            return
        
        file_size = os.path.getsize(filepath)
        if file_size > MAX_FILE_SIZE:
            await msg.edit_text("‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è Telegram (–º–∞–∫—Å. 2GB).")
            os.remove(filepath)
            return
        
        await msg.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...")
        await callback.message.answer_document(
            types.FSInputFile(filepath),
            caption="üéâ –í–æ—Ç –≤–∞—à —Ñ–∏–ª—å–º!"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
        await bot.send_document(
            CHANNEL_ID,
            types.FSInputFile(filepath),
            caption=f"üì¢ –ù–æ–≤—ã–π —Ñ–∏–ª—å–º!\n\nüîç –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: <b>{callback.message.text.split('–ø–æ –∑–∞–ø—Ä–æ—Å—É')[1].split(':')[0].strip()}</b>"
        )
        
        await msg.delete()
        os.remove(filepath)  # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    
    except Exception as e:
        logger.error(f"Download error: {e}")
        await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

async def on_startup(app):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    await bot.set_webhook(f"{WEBHOOK_HOST}{WEBHOOK_PATH}")
    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. Webhook: {WEBHOOK_HOST}{WEBHOOK_PATH}")

async def on_shutdown(app):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏"""
    await bot.delete_webhook()
    await bot.session.close()
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def create_app():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = web.Application()
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    
    SimpleRequestHandler(dp, bot).register(app, WEBHOOK_PATH)
    setup_application(app, dp)
    
    return app

if __name__ == "__main__":
    web.run_app(create_app(), host="0.0.0.0", port=10000)
